# Kernel: sgemm_nt_32x128

# Copyright 2014 Nervana Systems Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


<CONSTANT_MAPPING>
    addr_zero  : 4x<(128*16 + 32)*2 + (32*16 + 32)*2>
    szShareA : (32*16 + 32)
    szShareB : (128*16 + 32)

    gridDimA : c[0x0][0x14]
    gridDimB : c[0x0][0x18]

    param_Rand[0]   : c[0x0][0x140]
    param_Rand[1]   : c[0x0][0x144]
    param_A[0]      : c[0x0][0x148]
    param_A[1]      : c[0x0][0x14c]
    param_B[0]      : c[0x0][0x150]
    param_B[1]      : c[0x0][0x154]
    param_C[0]      : c[0x0][0x158]
    param_C[1]      : c[0x0][0x15c]
    param_lda       : c[0x0][0x160]
    param_ldb       : c[0x0][0x164]
    param_ldc       : c[0x0][0x168]
    param_m         : c[0x0][0x16c]
    param_n         : c[0x0][0x170]
    param_k         : c[0x0][0x174]
    param_alpha     : c[0x0][0x178]
    param_beta      : c[0x0][0x17c]
    param_flags     : c[0x0][0x180]
    param_ldaz      : c[0x0][0x184]
    param_ldbz      : c[0x0][0x188]
    param_ldcz      : c[0x0][0x18c]
    param_loops     : c[0x0][0x190]
</CONSTANT_MAPPING>

<REGISTER_MAPPING>

    32-79 ~ tidX, lda, ldb, ldaz, ldbz, ldb32, tid1, tid3, tid96, ta, tb00, tb32, tb64, tb96, xmad_ta, xmad_tb, shiftX, tidY<1-3>

    0-31 : czero<00-31>

     3, 2,11,10 : cx<0-3>y0
     7, 6,15,14 : cx<0-3>y1
     1, 0, 9, 8 : cx<0-3>y2
     5, 4,13,12 : cx<0-3>y3
    19,18,27,26 : cx<0-3>y4
    23,22,31,30 : cx<0-3>y5
    17,16,25,24 : cx<0-3>y6
    21,20,29,28 : cx<0-3>y7

      32-43 : j0Ay<0-7>, j0Bx<0-3>
      44-55 : j1Ay<0-7>, j1Bx<0-3>
      56-67 : j2Ay<0-7>, j2Bx<0-3>
      68-79 : j3Ay<0-7>, j3Bx<0-3>

      80-83 : loadA<0-3>
      84-99 : load0B<0-3>, load1B<0-3>, load2B<0-3>, load3B<0-3>

    100-109 : trackA<0-1>, track0B<0-1>, track1B<0-1>, track2B<0-1>, track3B<0-1>

    110-120 ~ writeAs, writeBs, k, tidY, txa, txb00, txb32, txb64, txb96
    121-127 ~ swapBuf, readAs, readBs, tid, blkA, blkB, blkZ

    32-39 : C00y<0-1>, C04y<0-1>, C08y<0-1>, C12y<0-1>
    40-47 : c<0-3>, d3, d2, d1, d0
   48-120 ~ ldc, ldcz, cx, ci, xmad_c, ldc1, ldc4, ldc12, writeCs, readCs, cy<00|04|08|12>, alpha, beta, flags

</REGISTER_MAPPING>

--:-:1:-:1      S2R tid,  SR_TID.X;
--:-:2:-:1      S2R blkB, SR_CTAID.Z;
--:-:3:-:1      S2R blkA, SR_CTAID.Y;
--:-:4:-:1      S2R blkZ, SR_CTAID.X;

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV k,    param_k;
--:-:-:-:1      MOV lda,  param_lda;
--:-:-:-:1      MOV ldb,  param_ldb;
--:-:-:-:1      MOV ldaz, param_ldaz;
--:-:-:-:1      MOV ldbz, param_ldbz;
--:-:-:-:1      SHL ldb32, ldb, 5;

--:-:-:-:1      STS.128 [addr_zero], RZ;
<CODE>
    return join '', map sprintf("--:-:-:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..7;
</CODE>

// tidX   = tid >> 2
// tidY   = (tid & 3) << 2
// shiftX = (tid & 3) << 3
01:-:-:-:1      SHR.U32 tidX, tid,  2;
01:-:-:-:1      LOP.AND tid3, tid,  3;
--:-:-:-:1      SHL     tidY, tid3, 2;
--:-:-:-:1      SHL     shiftX, tid3, 3;

// trackA += ((blkA*32 + tidX) * lda + tidAY) * 4
04:-:-:-:1      ISCADD   txa, blkA, tidX, 5;
--:-:-:-:1      XMAD.LO  ta,  lda,  txa,  tidY, xmad_ta;
08:-:-:-:1      XMAD.LO2 ta,  ldaz, blkZ, ta;
--:-:-:-:1      LEA      trackA0.CC, ta, param_A[0],     2;
--:-:-:-:1      LEA.HI.X trackA1,    ta, param_A[1], RZ, 2;

// trackB += ((blkB*128 + tidX) * ldb + tidY) * 4
02:-:-:-:1      ISCADD txb00, blkB, tidX, 7;
--:-:-:-:1      IADD   txb32, txb00, 32;
--:-:-:-:1      IADD   txb64, txb00, 64;
--:-:-:-:1      IADD   txb96, txb00, 96;

--:-:-:-:1      XMAD.LO  tb00, ldb,  txb00, tidY, xmad_tb;
08:-:-:-:1      XMAD.LO2 tb00, ldbz, blkZ, tb00;
--:-:-:-:1      IADD     tb32, tb00, ldb32;
--:-:-:-:1      IADD     tb64, tb32, ldb32;
--:-:-:-:1      IADD     tb96, tb64, ldb32;

--:-:-:-:1      LEA      track0B0.CC, tb00, param_B[0],     2;
--:-:-:-:1      LEA.HI.X track0B1,    tb00, param_B[1], RZ, 2;
--:-:-:-:1      LEA      track1B0.CC, tb32, param_B[0],     2;
--:-:-:-:1      LEA.HI.X track1B1,    tb32, param_B[1], RZ, 2;
--:-:-:-:1      LEA      track2B0.CC, tb64, param_B[0],     2;
--:-:-:-:1      LEA.HI.X track2B1,    tb64, param_B[1], RZ, 2;
--:-:-:-:1      LEA      track3B0.CC, tb96, param_B[0],     2;
--:-:-:-:1      LEA.HI.X track3B1,    tb96, param_B[1], RZ, 2;

// writeAs = (tidY*32 + tidX + shiftX) * 4
--:-:-:-:1      ISCADD writeAs, tidY, tidX, 5;
--:-:-:-:1      IADD   writeAs, writeAs, shiftX;
--:-:-:-:1      ISCADD writeAs, writeAs, 4x<szShareA + szShareB>, 2;

// writeBs = (tidY*128 + tidX + shiftX) * 4
--:-:-:-:1      ISCADD writeBs, tidY, tidX, 7;
--:-:-:-:1      IADD   writeBs, writeBs, shiftX;
--:-:-:-:1      ISCADD writeBs, writeBs, 4x<szShareA*2 + szShareB>, 2;

// readAs = (((tid & 16) >> 3) | (tid & 1)) << 4
--:-:-:-:1      LOP.AND tid1,   tid,    1;
--:-:-:-:1      LOP.AND readAs, tid,    16;
--:-:-:-:1      SHR.U32 readAs, readAs, 3;
--:-:-:-:1      LOP.OR  readAs, readAs, tid1;
--:-:-:-:1      SHL     readAs, readAs, 4;

// readBs = (((tid >> 1) & 7) | ((tid & 96) >> 2)) << 4
01:-:-:-:1      LOP.AND tid96,  tid,    96;
--:-:-:-:1      SHR.U32 tid96,  tid96,  2;
--:-:-:-:1      BFE.U32 readBs, tid,    0x301; // 3 bits at position 1
--:-:-:-:1      LOP.OR  readBs, readBs, tid96;
--:-:-:-:1      ISCADD  readBs, readBs, 4x<szShareA>, 4;

--:-:-:-:1      MOV32I swapBuf, -4x<szShareA + szShareB>;
</SCHEDULE_BLOCK>

REMAINDER:

<SCHEDULE_BLOCK>

<CODE>
    our $vec;
    return $vec ? q{
--:-:-:-:1      ISETP.LT.AND P2, PT, txb00, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P3, PT, txb32, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P4, PT, txb64, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P5, PT, txb96, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P6, PT, txa,   param_m, PT;

--:-:-:-:1      ISETP.LT.AND P2, PT, tidY, k, P2;
--:-:-:-:1      ISETP.LT.AND P3, PT, tidY, k, P3;
--:-:-:-:1      ISETP.LT.AND P4, PT, tidY, k, P4;
--:-:-:-:1      ISETP.LT.AND P5, PT, tidY, k, P5;
--:-:-:-:1      ISETP.LT.AND P6, PT, tidY, k, P6;

<ORDERED>
--:-:1:-:1  @P2 LDG.E.CI.128 load0B, [track0B];
--:-:2:-:1  @P3 LDG.E.CI.128 load1B, [track1B];
--:-:3:-:1  @P4 LDG.E.CI.128 load2B, [track2B];
--:-:4:-:1  @P5 LDG.E.CI.128 load3B, [track3B];
--:-:5:-:1  @P6 LDG.E.CI.128 loadA,  [trackA];
</ORDERED>

<ORDERED>
--:-:6:-:1 @!P2 LDS.U.128 load0B, [addr_zero];
--:-:6:-:1 @!P3 LDS.U.128 load1B, [addr_zero];
--:-:6:-:1 @!P4 LDS.U.128 load2B, [addr_zero];
--:-:6:-:1 @!P5 LDS.U.128 load3B, [addr_zero];
--:-:6:-:1 @!P6 LDS.U.128 loadA,  [addr_zero];
</ORDERED>

    } : q{

--:-:-:-:1      IADD tidY1, tidY, 1;
--:-:-:-:1      IADD tidY2, tidY, 2;
--:-:-:-:1      IADD tidY3, tidY, 3;

--:-:-:-:1      ISETP.LT.AND P4, PT, txb00, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidY,  k, P4;
--:-:-:-:1      ISETP.LT.AND P1, PT, tidY1, k, P4;
--:-:-:-:1      ISETP.LT.AND P2, PT, tidY2, k, P4;
--:-:-:-:1      ISETP.LT.AND P3, PT, tidY3, k, P4;
<ORDERED>
--:-:1:-:1  @P0 LDG.E.CI load0B0, [track0B + 4x<0>];
--:-:1:-:1  @P1 LDG.E.CI load0B1, [track0B + 4x<1>];
--:-:1:-:1  @P2 LDG.E.CI load0B2, [track0B + 4x<2>];
--:-:1:-:1  @P3 LDG.E.CI load0B3, [track0B + 4x<3>];
</ORDERED>
--:-:-:-:1 @!P0 MOV load0B0, RZ;
--:-:-:-:1 @!P1 MOV load0B1, RZ;
--:-:-:-:1 @!P2 MOV load0B2, RZ;
--:-:-:-:1 @!P3 MOV load0B3, RZ;

--:-:-:-:1      ISETP.LT.AND P5, PT, txb32, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidY,  k, P5;
--:-:-:-:1      ISETP.LT.AND P1, PT, tidY1, k, P5;
--:-:-:-:1      ISETP.LT.AND P2, PT, tidY2, k, P5;
--:-:-:-:1      ISETP.LT.AND P3, PT, tidY3, k, P5;
<ORDERED>
--:-:2:-:1  @P0 LDG.E.CI load1B0, [track1B + 4x<0>];
--:-:2:-:1  @P1 LDG.E.CI load1B1, [track1B + 4x<1>];
--:-:2:-:1  @P2 LDG.E.CI load1B2, [track1B + 4x<2>];
--:-:2:-:1  @P3 LDG.E.CI load1B3, [track1B + 4x<3>];
</ORDERED>
--:-:-:-:1 @!P0 MOV load1B0, RZ;
--:-:-:-:1 @!P1 MOV load1B1, RZ;
--:-:-:-:1 @!P2 MOV load1B2, RZ;
--:-:-:-:1 @!P3 MOV load1B3, RZ;

--:-:-:-:1      ISETP.LT.AND P4, PT, txb64, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidY,  k, P4;
--:-:-:-:1      ISETP.LT.AND P1, PT, tidY1, k, P4;
--:-:-:-:1      ISETP.LT.AND P2, PT, tidY2, k, P4;
--:-:-:-:1      ISETP.LT.AND P3, PT, tidY3, k, P4;
<ORDERED>
--:-:3:-:1  @P0 LDG.E.CI load2B0, [track2B + 4x<0>];
--:-:3:-:1  @P1 LDG.E.CI load2B1, [track2B + 4x<1>];
--:-:3:-:1  @P2 LDG.E.CI load2B2, [track2B + 4x<2>];
--:-:3:-:1  @P3 LDG.E.CI load2B3, [track2B + 4x<3>];
</ORDERED>
--:-:-:-:1 @!P0 MOV load2B0, RZ;
--:-:-:-:1 @!P1 MOV load2B1, RZ;
--:-:-:-:1 @!P2 MOV load2B2, RZ;
--:-:-:-:1 @!P3 MOV load2B3, RZ;

--:-:-:-:1      ISETP.LT.AND P5, PT, txb96, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidY,  k, P5;
--:-:-:-:1      ISETP.LT.AND P1, PT, tidY1, k, P5;
--:-:-:-:1      ISETP.LT.AND P2, PT, tidY2, k, P5;
--:-:-:-:1      ISETP.LT.AND P3, PT, tidY3, k, P5;
<ORDERED>
--:-:4:-:1  @P0 LDG.E.CI load3B0, [track3B + 4x<0>];
--:-:4:-:1  @P1 LDG.E.CI load3B1, [track3B + 4x<1>];
--:-:4:-:1  @P2 LDG.E.CI load3B2, [track3B + 4x<2>];
--:-:4:-:1  @P3 LDG.E.CI load3B3, [track3B + 4x<3>];
</ORDERED>
--:-:-:-:1 @!P0 MOV load3B0, RZ;
--:-:-:-:1 @!P1 MOV load3B1, RZ;
--:-:-:-:1 @!P2 MOV load3B2, RZ;
--:-:-:-:1 @!P3 MOV load3B3, RZ;

--:-:-:-:1      ISETP.LT.AND P6, PT, txa, param_m, PT;
--:-:-:-:1      ISETP.LT.AND P0, PT, tidY,  k, P6;
--:-:-:-:1      ISETP.LT.AND P1, PT, tidY1, k, P6;
--:-:-:-:1      ISETP.LT.AND P2, PT, tidY2, k, P6;
--:-:-:-:1      ISETP.LT.AND P3, PT, tidY3, k, P6;
<ORDERED>
--:-:5:-:1  @P0 LDG.E.CI loadA0, [trackA + 4x<0>];
--:-:5:-:1  @P1 LDG.E.CI loadA1, [trackA + 4x<1>];
--:-:5:-:1  @P2 LDG.E.CI loadA2, [trackA + 4x<2>];
--:-:5:-:1  @P3 LDG.E.CI loadA3, [trackA + 4x<3>];
</ORDERED>
--:-:-:-:1 @!P0 MOV loadA0, RZ;
--:-:-:-:1 @!P1 MOV loadA1, RZ;
--:-:-:-:1 @!P2 MOV loadA2, RZ;
--:-:-:-:1 @!P3 MOV loadA3, RZ;

--:-:-:-:1      ISETP.LT.AND P2, PT, txb00, param_n, PT;
--:-:-:-:1      ISETP.LT.AND P3, PT, txb32, param_n, PT;
    };
</CODE>

--:-:-:-:1      ISETP.GE.AND P2, PT, k, 32, P2;
--:-:-:-:1      ISETP.GE.AND P3, PT, k, 32, P3;
--:-:-:-:1      ISETP.GE.AND P4, PT, k, 32, P4;
--:-:-:-:1      ISETP.GE.AND P5, PT, k, 32, P5;
--:-:-:-:1      ISETP.GE.AND P6, PT, k, 32, P6;

// bDoRemainder = k & 15 && k > 16
--:-:-:-:1      LOP.AND.NZ P0, RZ, k, 15;
--:-:-:-:1      ISETP.GT.AND P1, PT, k, 16, P0;

</SCHEDULE_BLOCK>

21:-:-:-:1      STS [writeBs + 4x<0*128 + 0*32>], load0B0;
--:-:-:-:0      IADD   track0B0.CC, track0B0, 4x<16>;
--:-:-:-:1      STS [writeBs + 4x<1*128 + 0*32>], load0B1;
--:-:-:-:1      STS [writeBs + 4x<2*128 + 0*32>], load0B2;
--:-:-:-:4      STS [writeBs + 4x<3*128 + 0*32>], load0B3;

--:-:-:-:0      IADD.X track0B1,    track0B1, RZ;

02:-:-:-:1      STS [writeBs + 4x<0*128 + 1*32>], load1B0;
--:-:-:-:0      IADD   track1B0.CC, track1B0, 4x<16>;
--:-:-:-:1      STS [writeBs + 4x<1*128 + 1*32>], load1B1;
--:-:-:-:1      STS [writeBs + 4x<2*128 + 1*32>], load1B2;
--:-:-:-:4      STS [writeBs + 4x<3*128 + 1*32>], load1B3;

--:-:-:-:0      IADD.X track1B1,    track1B1, RZ;

04:-:-:-:1      STS [writeBs + 4x<0*128 + 2*32>], load2B0;
--:-:-:-:0      IADD   track2B0.CC, track2B0, 4x<16>;
--:-:-:-:1      STS [writeBs + 4x<1*128 + 2*32>], load2B1;
--:-:-:-:1      STS [writeBs + 4x<2*128 + 2*32>], load2B2;
--:-:-:-:4      STS [writeBs + 4x<3*128 + 2*32>], load2B3;

--:-:-:-:0      IADD.X track2B1,    track2B1, RZ;

08:-:-:-:1      STS [writeBs + 4x<0*128 + 3*32>], load3B0;
--:-:-:-:0      IADD   track3B0.CC, track3B0, 4x<16>;
--:-:-:-:1      STS [writeBs + 4x<1*128 + 3*32>], load3B1;
--:-:-:-:1      STS [writeBs + 4x<2*128 + 3*32>], load3B2;
--:-:-:-:4      STS [writeBs + 4x<3*128 + 3*32>], load3B3;

--:-:-:-:0      IADD.X track3B1,    track3B1, RZ;

10:-:-:-:1      STS [writeAs + 4x<0*32>], loadA0;
--:-:-:-:0      IADD   trackA0.CC, trackA0, 4x<16>;
--:-:-:-:1      STS [writeAs + 4x<1*32>], loadA1;
--:-:-:-:1      STS [writeAs + 4x<2*32>], loadA2;
--:-:-:-:1      STS [writeAs + 4x<3*32>], loadA3;

--:-:-:-:1      IADD readBs,  readBs, -swapBuf;
--:-:-:-:0      IADD readAs,  readAs, -swapBuf;
--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      IADD writeBs, writeBs, swapBuf;
--:-:-:-:1      IADD writeAs, writeAs, swapBuf;
--:-:-:-:1      IADD swapBuf, RZ, -swapBuf;

--:-:-:-:0      IADD.X trackA1,    trackA1, RZ;

--:-:1:-:1      LDS.U.128 j0Ay0, [readAs + 4x<0*32  + 00 + 0*8>];
--:-:1:-:1      LDS.U.128 j0Bx0, [readBs + 4x<0*128 + 00 + 0*8>];
--:-:1:-:1      LDS.U.128 j0Ay4, [readAs + 4x<0*32  + 16 + 0*8>];
--:-:2:-:1      LDS.U.128 j1Ay0, [readAs + 4x<1*32  + 00 + 0*8>];
--:-:2:-:1      LDS.U.128 j1Bx0, [readBs + 4x<1*128 + 00 + 0*8>];
--:-:2:-:1      LDS.U.128 j1Ay4, [readAs + 4x<1*32  + 16 + 0*8>];
<CODE>
    our $vec;
    return $vec ? q{
--:-:3:-:1  @P2 LDG.E.CI.128 load0B, [track0B];
--:-:4:-:1  @P3 LDG.E.CI.128 load1B, [track1B];
--:-:5:-:1  @P4 LDG.E.CI.128 load2B, [track2B];
--:-:5:-:1  @P5 LDG.E.CI.128 load3B, [track3B];
--:-:6:-:1  @P6 LDG.E.CI.128 loadA,  [trackA];
    } : q{
--:-:3:-:1  @P2 LDG.E.CI load0B0, [track0B + 4x<0>];
--:-:3:-:1  @P2 LDG.E.CI load0B1, [track0B + 4x<1>];
--:-:3:-:1  @P2 LDG.E.CI load0B2, [track0B + 4x<2>];
--:-:3:-:1  @P2 LDG.E.CI load0B3, [track0B + 4x<3>];

--:-:4:-:1  @P3 LDG.E.CI load1B0, [track1B + 4x<0>];
--:-:4:-:1  @P3 LDG.E.CI load1B1, [track1B + 4x<1>];
--:-:4:-:1  @P3 LDG.E.CI load1B2, [track1B + 4x<2>];
--:-:4:-:1  @P3 LDG.E.CI load1B3, [track1B + 4x<3>];

--:-:5:-:1  @P4 LDG.E.CI load2B0, [track2B + 4x<0>];
--:-:5:-:1  @P4 LDG.E.CI load2B1, [track2B + 4x<1>];
--:-:5:-:1  @P4 LDG.E.CI load2B2, [track2B + 4x<2>];
--:-:5:-:1  @P4 LDG.E.CI load2B3, [track2B + 4x<3>];

--:-:5:-:1  @P5 LDG.E.CI load3B0, [track3B + 4x<0>];
--:-:5:-:1  @P5 LDG.E.CI load3B1, [track3B + 4x<1>];
--:-:5:-:1  @P5 LDG.E.CI load3B2, [track3B + 4x<2>];
--:-:5:-:1  @P5 LDG.E.CI load3B3, [track3B + 4x<3>];
    };
</CODE>

<CODE>
    our $vec;
    our %insert =
    (
        j0c14 => "--:-:-:-:1      ISETP.GE.AND P0, PT, k, 32, PT;\n",

        j4c18  => "04:-:-:-:1  \@P0 STS [writeBs + 4x<0*128 + 0*32>], load0B0;\n",
        j4c20  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<1*128 + 0*32>], load0B1;\n",
        j5c18  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<2*128 + 0*32>], load0B2;\n",
        j5c20  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<3*128 + 0*32>], load0B3;\n",
 
        j4c31  => "--:-:-:-:1  \@P2 IADD   track0B0.CC, track0B0, 4x<16>;\n",
        j5c31  => "--:-:-:-:1  \@P2 IADD.X track0B1,    track0B1, RZ;\n",
 
        j6c18  => "08:-:-:-:1  \@P0 STS [writeBs + 4x<0*128 + 1*32>], load1B0;\n",
        j6c20  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<1*128 + 1*32>], load1B1;\n",
        j7c18  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<2*128 + 1*32>], load1B2;\n",
        j7c20  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<3*128 + 1*32>], load1B3;\n",
 
        j6c31  => "--:-:-:-:1  \@P3 IADD   track1B0.CC, track1B0, 4x<16>;\n",
        j7c31  => "--:-:-:-:1  \@P3 IADD.X track1B1,    track1B1, RZ;\n",
 
        j8c18  => "10:-:-:-:1  \@P0 STS [writeBs + 4x<0*128 + 2*32>], load2B0;\n",
        j8c20  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<1*128 + 2*32>], load2B1;\n",
        j9c18  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<2*128 + 2*32>], load2B2;\n",
        j9c20  => "--:-:-:-:1  \@P0 STS [writeBs + 4x<3*128 + 2*32>], load2B3;\n",
 
        j8c31  => "--:-:-:-:1  \@P4 IADD   track2B0.CC, track2B0, 4x<16>;\n",
        j9c31  => "--:-:-:-:1  \@P4 IADD.X track2B1,    track2B1, RZ;\n",

        j10c18 => "--:-:-:-:1  \@P0 STS [writeBs + 4x<0*128 + 3*32>], load3B0;\n",
        j10c20 => "--:-:-:-:1  \@P0 STS [writeBs + 4x<1*128 + 3*32>], load3B1;\n",
        j11c18 => "--:-:-:-:1  \@P0 STS [writeBs + 4x<2*128 + 3*32>], load3B2;\n",
        j11c20 => "--:-:-:-:1  \@P0 STS [writeBs + 4x<3*128 + 3*32>], load3B3;\n",

        j10c31 => "--:-:-:-:1  \@P5 IADD   track3B0.CC, track3B0, 4x<16>;\n",
        j11c31 => "--:-:-:-:1  \@P5 IADD.X track3B1,    track3B1, RZ;\n",

        j12c18 => "20:-:-:-:1  \@P0 STS [writeAs + 4x<0*32>], loadA0;\n",
        j12c20 => "--:-:-:-:1  \@P0 STS [writeAs + 4x<1*32>], loadA1;\n",
        j13c12 => "--:-:-:-:1  \@P0 STS [writeAs + 4x<2*32>], loadA2;\n",
        j13c14 => "--:-:-:-:1  \@P0 STS [writeAs + 4x<3*32>], loadA3;\n",

        j12c31 => "--:-:-:-:1  \@P6 IADD   trackA0.CC, trackA0, 4x<16>;\n",
        j13c15 => "--:-:-:-:1  \@P6 IADD.X trackA1,    trackA1, RZ;\n",

        j13c17 => "--:-:-:-:1      IADD k, k, -16;\n",
        j13c22 => "--:-:-:-:1      ISETP.GE.AND P2, PT, k, 32, P2;\n",
        j13c24 => "--:-:-:-:1      ISETP.GE.AND P3, PT, k, 32, P3;\n",
        j13c26 => "--:-:-:-:1      ISETP.GE.AND P4, PT, k, 32, P4;\n",
        j13c28 => "--:-:-:-:1      ISETP.GE.AND P5, PT, k, 32, P5;\n",
        j13c30 => "--:-:-:-:1      ISETP.GE.AND P6, PT, k, 32, P6;\n",

        j13c31 => "--:-:-:-:5  \@P0 BAR.SYNC 0;\n" .
                  "--:-:-:-:1  \@P0 IADD readAs,  readAs, -swapBuf;\n" .
                  "--:-:-:-:1  \@P0 IADD readBs,  readBs, -swapBuf;\n" .
                  "--:-:-:-:1  \@P0 IADD writeAs, writeAs, swapBuf;\n" .
                  "--:-:-:-:1  \@P0 IADD writeBs, writeBs, swapBuf;\n" .
                  "--:-:-:-:1  \@P0 IADD swapBuf, RZ,     -swapBuf;\n",

        j15c14 => "--:-:-:-:1      ISETP.GE.AND P0, PT, k, 16, PT;\n",

        ($vec ? 
            (
                j14c6  => "--:-:3:-:1  \@P2 LDG.E.CI.128 load0B, [track0B];\n",
                j14c8  => "--:-:4:-:1  \@P3 LDG.E.CI.128 load1B, [track1B];\n",
                j14c10 => "--:-:5:-:1  \@P4 LDG.E.CI.128 load2B, [track2B];\n",
                j14c12 => "--:-:5:-:1  \@P5 LDG.E.CI.128 load3B, [track3B];\n",
                j14c14 => "--:-:6:-:1  \@P6 LDG.E.CI.128 loadA,  [trackA];\n",
            ) :
            (

                j14c6  => "--:-:3:-:1  \@P2 LDG.E.CI load0B0, [track0B + 4x<0>];\n",
                j14c8  => "--:-:3:-:1  \@P2 LDG.E.CI load0B1, [track0B + 4x<1>];\n",
                j14c10 => "--:-:3:-:1  \@P2 LDG.E.CI load0B2, [track0B + 4x<2>];\n",
                j14c12 => "--:-:3:-:1  \@P2 LDG.E.CI load0B3, [track0B + 4x<3>];\n",

                j14c18 => "--:-:4:-:1  \@P3 LDG.E.CI load1B0, [track1B + 4x<0>];\n",
                j14c20 => "--:-:4:-:1  \@P3 LDG.E.CI load1B1, [track1B + 4x<1>];\n",
                j14c22 => "--:-:4:-:1  \@P3 LDG.E.CI load1B2, [track1B + 4x<2>];\n",
                j14c24 => "--:-:4:-:1  \@P3 LDG.E.CI load1B3, [track1B + 4x<3>];\n",

                j15c6  => "--:-:5:-:1  \@P4 LDG.E.CI load2B0, [track2B + 4x<0>];\n",
                j15c8  => "--:-:5:-:1  \@P4 LDG.E.CI load2B1, [track2B + 4x<1>];\n",
                j15c10 => "--:-:5:-:1  \@P4 LDG.E.CI load2B2, [track2B + 4x<2>];\n",
                j15c12 => "--:-:5:-:1  \@P4 LDG.E.CI load2B3, [track2B + 4x<3>];\n",

                j15c18 => "--:-:5:-:1  \@P5 LDG.E.CI load3B0, [track3B + 4x<0>];\n",
                j15c20 => "--:-:5:-:1  \@P5 LDG.E.CI load3B1, [track3B + 4x<1>];\n",
                j15c22 => "--:-:5:-:1  \@P5 LDG.E.CI load3B2, [track3B + 4x<2>];\n",
                j15c24 => "--:-:5:-:1  \@P5 LDG.E.CI load3B3, [track3B + 4x<3>];\n",

                j0c6   => "--:-:6:-:1  \@P6 LDG.E.CI loadA0, [trackA + 4x<0>];\n",
                j0c8   => "--:-:6:-:1  \@P6 LDG.E.CI loadA1, [trackA + 4x<1>];\n",
                j0c10  => "--:-:6:-:1  \@P6 LDG.E.CI loadA2, [trackA + 4x<2>];\n",
                j0c12  => "--:-:6:-:1  \@P6 LDG.E.CI loadA3, [trackA + 4x<3>];\n",
            )
        ),

        j15c31 => "--:-:-:Y:5  \@P0 BRA.U LOOP;\n" . 
                  "--:-:-:Y:5  \@P1 BRA.U REMAINDER;\n"
    );
    return '';
</CODE>

//<INCLUDE file="nervanagpu/kernels/sass/sgemm_common2_32x128.sass"/>

LOOP:

<CODE>

    our @top;
    our %insert;

    my @cOrder;
    my @swirl = ([0,2],[1,2],[1,0],[0,0]);
    my @y = (0,1,4,5);
    foreach my $x (0,2)
    {
        foreach my $y (@y)
        {
            push @cOrder, [$x + $_->[0], $y + $_->[1]] foreach @swirl;
        }
        @y = reverse @y;
    }

    my $out = join '', @top;
    
    foreach my $j (0 .. 15)
    {
        my $barrier   = $j & 1 ? 2 : 1;
        my $rsPred    = $j >= 14 ? '@P0' : '   ';
        my $loadReg   = ($j + 2) & 3;
        my $shareLine = ($j + 2) & 15;
        my $shiftX    = $shareLine >> 2;
        my $compute   = $j & 3;


        $insert{"j${j}c0"} = sprintf "--:-:%d:-:1  %s LDS.U.128 j%dAy0, [readAs + 4x<%d*32  + 00 + %d*8>];\n", $barrier, $rsPred, $loadReg, $shareLine, $shiftX;
        $insert{"j${j}c2"} = sprintf "--:-:%d:-:1  %s LDS.U.128 j%dBx0, [readBs + 4x<%d*128 + 00 + %d*8>];\n", $barrier, $rsPred, $loadReg, $shareLine, $shiftX;
        $insert{"j${j}c4"} = sprintf "--:-:%d:-:1  %s LDS.U.128 j%dAy4, [readAs + 4x<%d*32  + 16 + %d*8>];\n", $barrier, $rsPred, $loadReg, $shareLine, $shiftX;

        foreach my $c (0 .. 31)
        {
            my ($x,$y) = @{$cOrder[$c]};

            my $ins    = $insert{"j${j}c$c"} || '';

            my $wait   = $c == 0 ? "0$barrier" : '--';

            my $stall  = (split "\n", $ins)[0] =~ /LDS|F2F|I2I|LDG|STS|BAR|BRA/ ? 0 : 1;

            my $yield  = $c == 16 && $stall ? 'Y' : '-';

            my $ctrl   = "$wait:-:-:$yield:$stall";

            $out .= sprintf "%s      FFMA cx%dy%d, j%dBx%d, j%dAy%d, cx%dy%d;\n%s", $ctrl,  $x,$y,  $compute,$x,  $compute,$y,  $x,$y,  $ins;
        }
    }
    return $out;

</CODE>

<SCHEDULE_BLOCK>

--:-:-:-:1      ISETP.GT.AND P0, PT, swapBuf, RZ, PT;
--:-:-:-:1      IADD readBs,  readBs, -4x<szShareA>;
--:-:-:-:1  @P0 IADD readAs,  readAs, -swapBuf;
--:-:-:-:1  @P0 IADD readBs,  readBs, -swapBuf;

--:-:-:-:1      MOV alpha, param_alpha;
--:-:-:-:1      MOV beta,  param_beta;
--:-:-:-:1      MOV flags, param_flags;

// writeCs = (readAs / 4) * 128 + readBs;
--:-:-:-:1      ISCADD  writeCs, readAs, readBs, 5;

// readCs = tid * 4;
--:-:-:-:1      SHL readCs, tid, 2;

// cx = blkB*128 + tid;
--:-:-:-:1      ISCADD cx, blkB, tid, 7;

// cy = blkA*32
--:-:-:-:1      SHL cy00, blkA, 5;

// C += (cy*ldc + cx) * 4;
--:-:-:-:1      MOV  ldc,  param_ldc;
--:-:-:-:1      MOV  ldcz, param_ldcz;

--:-:-:-:1      XMAD.LO  ci, cy00, ldc, cx, xmad_c;
--:-:-:-:1      XMAD.LO2 ci, ldcz, blkZ, ci;
--:-:-:-:1      LEA      C00y0.CC, ci, param_C[0],     2;
--:-:-:-:1      LEA.HI.X C00y1,    ci, param_C[1], RZ, 2;

// cx < n
--:-:-:-:1      ISETP.LT.AND P6, PT, cx, param_n, PT;

// beta != 0
--:-:-:-:1      ISETP.NE.AND P5, PT, beta, RZ, P6;

// Apply relu
--:-:-:-:1      LOP.AND.NZ P4, RZ, flags, 2;

--:-:-:-:1      SHL  ldc1, ldc, 2;
--:-:-:-:1      SHL  ldc4, ldc, 4;
--:-:-:-:1      ISCADD ldc12, ldc, -ldc4, 6;

</SCHEDULE_BLOCK>

--:-:-:-:5      IADD   C04y0.CC, C00y0, ldc4;
--:-:-:-:1      IADD   cy04, cy00,  4;
--:-:-:-:1      IADD.X C04y1,    C00y1, RZ;
--:-:-:-:5      IADD   C08y0.CC, C04y0, ldc4;
--:-:-:-:1      IADD   cy08, cy00,  8;
--:-:-:-:1      IADD.X C08y1,    C04y1, RZ;
--:-:-:-:5      IADD   C12y0.CC, C08y0, ldc4;
--:-:-:-:1      IADD   cy12, cy00,  12;
--:-:-:-:0      IADD.X C12y1,    C08y1, RZ;

--:-:-:-:5      BAR.SYNC 0;

<CODE>

    my $out;
    foreach my $y (0..7)
    {
        $out .=
            "--:-:-:-:5      IADD   C00y0.CC, C00y0, ldc12;\n" .
            "--:-:-:-:1      IADD   cy00,     cy00,  12;\n" .
            "--:-:-:-:1      IADD.X C00y1,    C00y1, RZ;\n" .
            "--:-:-:-:5      IADD   C04y0.CC, C04y0, ldc12;\n" .
            "--:-:-:-:1      IADD   cy04,     cy04,  12;\n" .
            "--:-:-:-:1      IADD.X C04y1,    C04y1, RZ;\n" .
            "--:-:-:-:5      IADD   C08y0.CC, C08y0, ldc12;\n" .
            "--:-:-:-:1      IADD   cy08,     cy08,  12;\n" .
            "--:-:-:-:1      IADD.X C08y1,    C08y1, RZ;\n" .
            "--:-:-:-:5      IADD   C12y0.CC, C12y0, ldc12;\n" .
            "--:-:-:-:1      IADD   cy12,     cy12,  12;\n" .
            "--:-:-:-:1      IADD.X C12y1,    C12y1, RZ;\n\n"  if $y == 4;

        $out .= sprintf(
            "--:-:-:-:1      FMUL c0, cx0y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c1, cx1y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c2, cx2y%d, alpha;\n" .
            "--:-:-:-:0      FMUL c3, cx3y%d, alpha;\n",
            ($y) x 4);

        $out .= "--:-:-:-:5      CAL STORE_C;\n\n";
    }
    return $out;

</CODE>

--:-:-:-:5      EXIT;

STORE_C:

<SCHEDULE_BLOCK>
--:-:-:-:1      ISETP.LT.AND P0, PT, cy00, param_m, P5;
--:-:-:-:1      ISETP.LT.AND P1, PT, cy04, param_m, P5;
--:-:-:-:1      ISETP.LT.AND P2, PT, cy08, param_m, P5;
--:-:-:-:1      ISETP.LT.AND P3, PT, cy12, param_m, P5;

--:-:1:-:1  @P0 LDG.E d0, [C00y];
--:-:2:-:1  @P1 LDG.E d1, [C04y];
--:-:3:-:1  @P2 LDG.E d2, [C08y];
--:-:4:-:1  @P3 LDG.E d3, [C12y];
--:-:-:-:1 @!P0 MOV d0, RZ;
--:-:-:-:1 @!P1 MOV d1, RZ;
--:-:-:-:1 @!P2 MOV d2, RZ;
--:-:-:-:1 @!P3 MOV d3, RZ;

--:-:-:-:1      ISETP.LT.AND P0, PT, cy00, param_m, P6;
--:-:-:-:1      ISETP.LT.AND P1, PT, cy04, param_m, P6;
--:-:-:-:1      ISETP.LT.AND P2, PT, cy08, param_m, P6;
--:-:-:-:1      ISETP.LT.AND P3, PT, cy12, param_m, P6;

--:-:-:-:1      IADD cy00, cy00, 1;
--:-:-:-:1      IADD cy04, cy04, 1;
--:-:-:-:1      IADD cy08, cy08, 1;
--:-:-:-:3      IADD cy12, cy12, 1;

--:-:-:-:1  @P4 FMNMX c0, c0, RZ, !PT;
--:-:-:-:1  @P4 FMNMX c1, c1, RZ, !PT;
--:-:-:-:1  @P4 FMNMX c2, c2, RZ, !PT;
--:-:-:-:1  @P4 FMNMX c3, c3, RZ, !PT;

--:-:-:-:1      STS.128 [writeCs], c0;
--:-:-:-:1      LDS c0, [readCs + 4x<0*128>];
--:-:5:-:1      LDS c1, [readCs + 4x<1*128>];
--:-:-:-:1      LDS c2, [readCs + 4x<2*128>];
--:-:6:-:1      LDS c3, [readCs + 4x<3*128>];
</SCHEDULE_BLOCK>

11:-:-:-:1  @P5 FFMA c0, d0, beta, c0;
02:-:-:-:1  @P5 FFMA c1, d1, beta, c1;
24:-:-:-:1  @P5 FFMA c2, d2, beta, c2;
08:-:-:-:0  @P5 FFMA c3, d3, beta, c3;

--:1:-:-:1  @P0 STG.E.CG [C00y], c0;
--:2:-:-:1  @P1 STG.E.CG [C04y], c1;
--:3:-:-:1  @P2 STG.E.CG [C08y], c2;
--:4:-:-:1  @P3 STG.E.CG [C12y], c3;

01:-:-:-:6      IADD   C00y0.CC, C00y0, ldc1;
--:-:-:-:1      IADD.X C00y1,    C00y1, RZ;
02:-:-:-:6      IADD   C04y0.CC, C04y0, ldc1;
--:-:-:-:1      IADD.X C04y1,    C04y1, RZ;
04:-:-:-:6      IADD   C08y0.CC, C08y0, ldc1;
--:-:-:-:1      IADD.X C08y1,    C08y1, RZ;
08:-:-:-:6      IADD   C12y0.CC, C12y0, ldc1;
--:-:-:-:0      IADD.X C12y1,    C12y1, RZ;

--:-:-:-:5      RET;
